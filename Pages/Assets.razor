@page "/assets"
@using CryptoMonitor.Data
@using CryptoMonitor.Models
@using CryptoMonitor.Shared
@using Microsoft.EntityFrameworkCore
@using System.Text
@using Microsoft.JSInterop
@inject CryptoMonitorDbContext Db
@inject IJSRuntime JSRuntime

<style>
    .table-wrapper {
        opacity: 0;
        animation: fadeIn 0.5s ease forwards;
    }

    .crypto-table {
        width: 100%;
        border-collapse: collapse;
    }

    .crypto-table tbody tr {
        opacity: 0;
        transform: translateY(20px);
        animation: slideUp 0.3s ease forwards;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Добавляем задержку для каждой строки */
    .crypto-table tbody tr:nth-child(1) { animation-delay: 0.1s; }
    .crypto-table tbody tr:nth-child(2) { animation-delay: 0.2s; }
    .crypto-table tbody tr:nth-child(3) { animation-delay: 0.3s; }
    .crypto-table tbody tr:nth-child(4) { animation-delay: 0.4s; }
    .crypto-table tbody tr:nth-child(5) { animation-delay: 0.5s; }
    .crypto-table tbody tr:nth-child(6) { animation-delay: 0.6s; }
    .crypto-table tbody tr:nth-child(7) { animation-delay: 0.7s; }
    .crypto-table tbody tr:nth-child(8) { animation-delay: 0.8s; }
    .crypto-table tbody tr:nth-child(9) { animation-delay: 0.9s; }
    .crypto-table tbody tr:nth-child(10) { animation-delay: 1s; }

    .export-section {
        margin-top: 2rem;
        padding: 1.5rem;
        background: var(--bg-light);
        border-radius: 15px;
        animation: fadeIn 0.5s ease forwards;
    }

    .export-options {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
        flex-wrap: wrap;
    }

    .export-option {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: var(--bg-dark);
        border-radius: 8px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .export-option:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .export-option input[type="radio"] {
        display: none;
    }

    .export-option input[type="radio"]:checked + label {
        color: var(--accent-3);
    }

    .date-range {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
        animation: slideUp 0.3s ease forwards;
    }

    .date-input {
        position: relative;
    }

    .date-input input {
        padding: 0.5rem;
        border: none;
        border-bottom: 1px solid var(--text-secondary);
        background: transparent;
        color: var(--text-main);
        font-size: 14px;
    }

    .date-input label {
        position: absolute;
        left: 0.5rem;
        top: 0.5rem;
        color: var(--text-secondary);
        font-size: 14px;
        pointer-events: none;
        transition: 0.2s ease all;
    }

    .date-input input:focus + label,
    .date-input input:valid + label {
        top: -20px;
        font-size: 12px;
        color: var(--accent-3);
    }

    .export-button {
        margin-top: 1rem;
        width: 200px;
    }

    .loading-export {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--accent-3);
        margin-top: 1rem;
        animation: fadeIn 0.3s ease forwards;
    }

    .loading-export::after {
        content: "";
        width: 20px;
        height: 20px;
        border: 2px solid var(--accent-3);
        border-top-color: transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .export-buttons {
        display: flex;
        gap: 1rem;
    }

    .export-buttons .btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .export-buttons .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .export-buttons .btn-primary {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .export-buttons .btn-primary:hover {
        background-color: #c82333;
        border-color: #bd2130;
    }

    .export-buttons .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .export-buttons .btn-success:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }

    .export-action-row {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
        flex-wrap: wrap;
    }
    .export-button {
        background: var(--accent-3, #2ecc40);
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.2rem;
        font-size: 1rem;
        font-family: inherit;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: background 0.2s, box-shadow 0.2s, transform 0.2s;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
    }
    .export-button:hover {
        background: var(--accent-2, #27ae60);
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.13);
    }
    .export-button.export-pdf {
        background: #c0392b;
    }
    .export-button.export-pdf:hover {
        background: #a93226;
    }
    .export-button.export-excel {
        background: #229954;
    }
    .export-button.export-excel:hover {
        background: #1e8449;
    }
    .export-button i {
        font-size: 1.2em;
    }

    .export-flex {
        display: flex;
        flex-direction: row;
        align-items: stretch;
        justify-content: space-between;
    }
    .export-main {
        flex: 1 1 0;
        min-width: 0;
    }
    .export-coin {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: 220px;
        position: relative;
    }
    /* From Uiverse.io by JohnnyCSilva */ 
.coin {
  font-size: 200px;
  width: 0.1em;
  height: 1em;
  background: linear-gradient(#faa504, #141001);
  margin: auto;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  animation: rotate_4001510 7s infinite linear;
  transform-style: preserve-3d;
}

.coin .side, .coin:before, .coin:after {
  content: "";
  position: absolute;
  width: 1em;
  height: 1em;
  overflow: hidden;
  border-radius: 50%;
  right: -0.4em;
  text-align: center;
  line-height: 1;
  transform: rotateY(-90deg);
  -moz-backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}

.coin .tails, .coin:after {
  left: -0.4em;
  transform: rotateY(90deg);
}

.coin:before, .coin:after {
  background: linear-gradient(#faa504, #141001);
  backface-visibility: hidden;
  transform: rotateY(90deg);
}

.coin:after {
  transform: rotateY(-90deg);
}

@@keyframes rotate_4001510 {
  100% {
    transform: rotateY(360deg);
    }   
}
       
.svg_back {
  transform: scaleX(-1);
}

</style>

@if (!assets.Any())
{
    <Loading />
}
else
{

    <div class="table-wrapper">
        <div class="filter-bar">
            <!-- Поиск -->
            <div class="input-container ic-search">
                <input id="filterInput"
                       class="input"
                       type="text"
                       placeholder=" "
                       @bind="searchTerm" />
                <div class="cut"></div>
                <label for="filterInput" class="placeholder">Поиск</label>
            </div>

            <select class="page-size-select"
                    @bind="pageSizeCandidate">
                @foreach (var size in new[] { 10, 20, 50 })
                {
                    <option value="@size">@size</option>
                }
            </select>

            <!-- Кнопка Применить -->
            <button class="btn-anim apply-btn"
                    @onclick="ApplyFilters">
                <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                Применить
            </button>
        </div>

        <table class="crypto-table">
            <thead>
                <tr>
                    <th @onclick="() => SortBy(nameof(AssetViewModel.Symbol))">Символ @(SortIndicator(nameof(AssetViewModel.Symbol)))</th>
                    <th @onclick="() => SortBy(nameof(AssetViewModel.Name))">Название @(SortIndicator(nameof(AssetViewModel.Name)))</th>
                    <th @onclick="() => SortBy(nameof(AssetViewModel.LatestPrice))">Цена USD @(SortIndicator(nameof(AssetViewModel.LatestPrice)))</th>
                    <th @onclick="() => SortBy(nameof(AssetViewModel.MarketCap))">Market Cap @(SortIndicator(nameof(AssetViewModel.MarketCap)))</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in assets)
                {
                    <tr>
                        <td>@item.Symbol</td>
                        <td>@item.Name</td>
                        <td>@item.LatestPrice?.ToString("N2")</td>
                        <td>@item.MarketCap?.ToString("N0")</td>
                    </tr>
                }
            </tbody>
        </table>

        <ul class="custom-pagination">
            <li class="page-item">
                <button class="btn-anim" @onclick="PrevPage">
                    <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    Предыдущая
                </button>
            </li>
            <li class="page-item">
                <span class="page-current" style="color: var(--text-main)">@pageIndex</span>
            </li>
            <li class="page-item">
                <button class="btn-anim" @onclick="NextPage">
                    <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    Следующая
                </button>
            </li>
        </ul>

        <div class="export-section export-flex">
            <div class="export-main">
                <h3>Экспорт данных</h3>
                <div class="export-options">
                    <div class="export-option">
                        <input type="radio" id="currentPage" name="exportType" value="current" checked @onchange="HandleExportTypeChange" />
                        <label for="currentPage" style="cursor: pointer">Текущая страница</label>
                    </div>
                    <div class="export-option">
                        <input type="radio" id="allData" name="exportType" value="all" @onchange="HandleExportTypeChange" />
                        <label for="allData" style="cursor: pointer">Все данные</label>
                    </div>
                    <div class="export-option">
                        <input type="radio" id="dateRange" name="exportType" value="range" @onchange="HandleExportTypeChange" />
                        <label for="dateRange" style="cursor: pointer">По дате</label>
                    </div>
                </div>

                @if (showDateRange)
                {
                    <div class="date-range">
                        <div class="date-input">
                            <input type="date" @bind="startDate" />
                            <label>Начальная дата</label>
                        </div>
                        <div class="date-input">
                            <input type="date" @bind="endDate" />
                            <label>Конечная дата</label>
                        </div>
                    </div>
                }

                <div class="export-options">
                    <div class="export-option">
                        <input type="radio" id="csvFormat" name="exportFormat" value="csv" checked @onchange="HandleExportFormatChange" />
                        <label for="csvFormat" style="cursor: pointer">CSV</label>
                    </div>
                    <div class="export-option">
                        <input type="radio" id="pdfFormat" name="exportFormat" value="pdf" @onchange="HandleExportFormatChange" />
                        <label for="pdfFormat" style="cursor: pointer">PDF</label>
                    </div>
                </div>

                <button class="btn-anim" style="margin-top: 20px; width: 200px" @onclick="ExportData">
                    <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    @if (isExporting)
                    {
                        <span>Экспорт...</span>
                    }
                    else
                    {
                        <span>ЭКСПОРТИРОВАТЬ</span>
                    }
                </button>

                @if (isExporting)
                {
                    <div class="loading-export">
                        Подготовка данных...
                    </div>
                }
            </div>
            <div class="export-coin">
                <!-- From Uiverse.io by JohnnyCSilva --> 
<div class="coin">
  <div class="side heads">
    <svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="100%" height="100%" version="1.1" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 4091.27 4091.73" xmlns:xlink="http://www.w3.org/1999/xlink">
 <g id="Layer_x0020_1">
  <metadata id="CorelCorpID_0Corel-Layer"></metadata>
  <g id="_1421344023328">
   <path fill="#F7931A" fill-rule="nonzero" d="M4030.06 2540.77c-273.24,1096.01 -1383.32,1763.02 -2479.46,1489.71 -1095.68,-273.24 -1762.69,-1383.39 -1489.33,-2479.31 273.12,-1096.13 1383.2,-1763.19 2479,-1489.95 1096.06,273.24 1763.03,1383.51 1489.76,2479.57l0.02 -0.02z"></path>
   <path fill="white" fill-rule="nonzero" d="M2947.77 1754.38c40.72,-272.26 -166.56,-418.61 -450,-516.24l91.95 -368.8 -224.5 -55.94 -89.51 359.09c-59.02,-14.72 -119.63,-28.59 -179.87,-42.34l90.16 -361.46 -224.36 -55.94 -92 368.68c-48.84,-11.12 -96.81,-22.11 -143.35,-33.69l0.26 -1.16 -309.59 -77.31 -59.72 239.78c0,0 166.56,38.18 163.05,40.53 90.91,22.69 107.35,82.87 104.62,130.57l-104.74 420.15c6.26,1.59 14.38,3.89 23.34,7.49 -7.49,-1.86 -15.46,-3.89 -23.73,-5.87l-146.81 588.57c-11.11,27.62 -39.31,69.07 -102.87,53.33 2.25,3.26 -163.17,-40.72 -163.17,-40.72l-111.46 256.98 292.15 72.83c54.35,13.63 107.61,27.89 160.06,41.3l-92.9 373.03 224.24 55.94 92 -369.07c61.26,16.63 120.71,31.97 178.91,46.43l-91.69 367.33 224.51 55.94 92.89 -372.33c382.82,72.45 670.67,43.24 791.83,-303.02 97.63,-278.78 -4.86,-439.58 -206.26,-544.44 146.69,-33.83 257.18,-130.31 286.64,-329.61l-0.07 -0.05zm-512.93 719.26c-69.38,278.78 -538.76,128.08 -690.94,90.29l123.28 -494.2c152.17,37.99 640.17,113.17 567.67,403.91zm69.43 -723.3c-63.29,253.58 -453.96,124.75 -580.69,93.16l111.77 -448.21c126.73,31.59 534.85,90.55 468.94,355.05l-0.02 0z"></path>
  </g>
 </g>
    </svg>
  </div>
  <div class="side tails">
    <svg xmlns="http://www.w3.org/2000/svg" class="svg_back" xml:space="preserve" width="100%" height="100%" version="1.1" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 4091.27 4091.73" xmlns:xlink="http://www.w3.org/1999/xlink">
 <g id="Layer_x0020_1">
  <metadata id="CorelCorpID_0Corel-Layer"></metadata>
  <g id="_1421344023328">
   <path fill="#F7931A" fill-rule="nonzero" d="M4030.06 2540.77c-273.24,1096.01 -1383.32,1763.02 -2479.46,1489.71 -1095.68,-273.24 -1762.69,-1383.39 -1489.33,-2479.31 273.12,-1096.13 1383.2,-1763.19 2479,-1489.95 1096.06,273.24 1763.03,1383.51 1489.76,2479.57l0.02 -0.02z"></path>
   <path fill="white" fill-rule="nonzero" d="M2947.77 1754.38c40.72,-272.26 -166.56,-418.61 -450,-516.24l91.95 -368.8 -224.5 -55.94 -89.51 359.09c-59.02,-14.72 -119.63,-28.59 -179.87,-42.34l90.16 -361.46 -224.36 -55.94 -92 368.68c-48.84,-11.12 -96.81,-22.11 -143.35,-33.69l0.26 -1.16 -309.59 -77.31 -59.72 239.78c0,0 166.56,38.18 163.05,40.53 90.91,22.69 107.35,82.87 104.62,130.57l-104.74 420.15c6.26,1.59 14.38,3.89 23.34,7.49 -7.49,-1.86 -15.46,-3.89 -23.73,-5.87l-146.81 588.57c-11.11,27.62 -39.31,69.07 -102.87,53.33 2.25,3.26 -163.17,-40.72 -163.17,-40.72l-111.46 256.98 292.15 72.83c54.35,13.63 107.61,27.89 160.06,41.3l-92.9 373.03 224.24 55.94 92 -369.07c61.26,16.63 120.71,31.97 178.91,46.43l-91.69 367.33 224.51 55.94 92.89 -372.33c382.82,72.45 670.67,43.24 791.83,-303.02 97.63,-278.78 -4.86,-439.58 -206.26,-544.44 146.69,-33.83 257.18,-130.31 286.64,-329.61l-0.07 -0.05zm-512.93 719.26c-69.38,278.78 -538.76,128.08 -690.94,90.29l123.28 -494.2c152.17,37.99 640.17,113.17 567.67,403.91zm69.43 -723.3c-63.29,253.58 -453.96,124.75 -580.69,93.16l111.77 -448.21c126.73,31.59 534.85,90.55 468.94,355.05l-0.02 0z"></path>
  </g>
 </g>
</svg></div>
</div>
            </div>
        </div>
    </div>
}

@code {
    private List<AssetViewModel> assets = new();
    private string filter = "";
    private string searchTerm = "";
    private int pageSize = 10;
    private int pageSizeCandidate = 10;
    private int pageIndex = 1;
    private string sortColumn = nameof(AssetViewModel.Symbol);
    private bool sortAsc = true;
    private bool isLoading = true;
    private bool showDateRange = false;
    private DateTime startDate = DateTime.Now.AddDays(-7);
    private DateTime endDate = DateTime.Now;
    private string exportType = "current";
    private string exportFormat = "csv";
    private bool isExporting = false;

    protected override async Task OnInitializedAsync()
    {
        var minDisplay = TimeSpan.FromMilliseconds(1000);
        var sw = System.Diagnostics.Stopwatch.StartNew();

        await LoadDataAsync();

        var remaining = minDisplay - sw.Elapsed;
        if (remaining > TimeSpan.Zero)
            await Task.Delay(remaining);

        isLoading = false;
    }

    private async Task ApplyFilters()
    {
        filter = searchTerm;
        pageSize = pageSizeCandidate;
        pageIndex = 1;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var query = Db.CryptoAssets
            .Select(a => new AssetViewModel
                {
                    AssetId = a.AssetId,
                    Symbol = a.Symbol,
                    Name = a.Name,
                    LatestPrice = a.PriceHistories
                                      .OrderByDescending(p => p.Timestamp)
                                      .Select(p => p.PriceUsd)
                                      .FirstOrDefault(),
                    MarketCap = a.PriceHistories
                                      .OrderByDescending(p => p.Timestamp)
                                      .Select(p => p.MarketCap)
                                      .FirstOrDefault()
                })
            .Where(x => x.Symbol.Contains(filter) || x.Name.Contains(filter));

        query = (sortColumn, sortAsc) switch
        {
            (nameof(AssetViewModel.Symbol), true) => query.OrderBy(x => x.Symbol),
            (nameof(AssetViewModel.Symbol), false) => query.OrderByDescending(x => x.Symbol),
            (nameof(AssetViewModel.Name), true) => query.OrderBy(x => x.Name),
            (nameof(AssetViewModel.Name), false) => query.OrderByDescending(x => x.Name),
            (nameof(AssetViewModel.LatestPrice), true) => query.OrderBy(x => x.LatestPrice),
            (nameof(AssetViewModel.LatestPrice), false) => query.OrderByDescending(x => x.LatestPrice),
            (nameof(AssetViewModel.MarketCap), true) => query.OrderBy(x => x.MarketCap),
            (nameof(AssetViewModel.MarketCap), false) => query.OrderByDescending(x => x.MarketCap),
            _ => query
        };

        assets = await query
            .Skip((pageIndex - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
    }

    private async Task PrevPage()
    {
        if (pageIndex > 1)
            pageIndex--;
        await LoadDataAsync();
    }

    private async Task NextPage()
    {
        pageIndex++;
        await LoadDataAsync();
    }

    private void SortBy(string col)
    {
        if (sortColumn == col)
            sortAsc = !sortAsc;
        else
        {
            sortColumn = col;
            sortAsc = true;
        }
        pageIndex = 1;
        _ = LoadDataAsync();
    }

    private string SortIndicator(string col) =>
        sortColumn == col ? (sortAsc ? "▲" : "▼") : "";

    private void HandleExportTypeChange(ChangeEventArgs e)
    {
        exportType = e.Value.ToString();
        showDateRange = exportType == "range";
    }

    private void HandleExportFormatChange(ChangeEventArgs e)
    {
        exportFormat = e.Value.ToString();
    }

    private async Task ExportData()
    {
        isExporting = true;
        try
        {
            var data = await GetExportData();
            var fileName = $"crypto_export_{DateTime.Now:yyyyMMddHHmmss}";
            
            if (exportFormat == "csv")
            {
                var csvContent = GenerateCsv(data);
                await DownloadFile(csvContent, $"{fileName}.csv", "text/csv");
            }
            else if (exportFormat == "pdf")
            {
                var pdfData = data.Select(a => new {
                    symbol = a.Symbol,
                    name = a.Name,
                    latestPrice = a.LatestPrice,
                    marketCap = a.MarketCap
                }).ToList();
                await JSRuntime.InvokeVoidAsync("exportToPdf", pdfData);
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            isExporting = false;
        }
    }

    private async Task<List<AssetViewModel>> GetExportData()
    {
        if (exportType == "current")
        {
            return assets;
        }
        else if (exportType == "all")
        {
            return await Db.CryptoAssets
                .Select(a => new AssetViewModel
                {
                    AssetId = a.AssetId,
                    Symbol = a.Symbol,
                    Name = a.Name,
                    LatestPrice = a.PriceHistories
                        .OrderByDescending(p => p.Timestamp)
                        .Select(p => p.PriceUsd)
                        .FirstOrDefault(),
                    MarketCap = a.PriceHistories
                        .OrderByDescending(p => p.Timestamp)
                        .Select(p => p.MarketCap)
                        .FirstOrDefault()
                })
                .ToListAsync();
        }
        else
        {
            // Логика для выбора по дате
            return await Db.CryptoAssets
                .Select(a => new AssetViewModel
                {
                    AssetId = a.AssetId,
                    Symbol = a.Symbol,
                    Name = a.Name,
                    LatestPrice = a.PriceHistories
                        .Where(p => p.Timestamp >= startDate && p.Timestamp <= endDate)
                        .OrderByDescending(p => p.Timestamp)
                        .Select(p => p.PriceUsd)
                        .FirstOrDefault(),
                    MarketCap = a.PriceHistories
                        .Where(p => p.Timestamp >= startDate && p.Timestamp <= endDate)
                        .OrderByDescending(p => p.Timestamp)
                        .Select(p => p.MarketCap)
                        .FirstOrDefault()
                })
                .ToListAsync();
        }
    }

    private string GenerateCsv(List<AssetViewModel> data)
    {
        var sb = new StringBuilder();
        sb.AppendLine("Symbol,Name,Price USD,Market Cap");
        
        foreach (var item in data)
        {
            sb.AppendLine($"{item.Symbol},{item.Name},{item.LatestPrice?.ToString("N2")},{item.MarketCap?.ToString("N0")}");
        }
        
        return sb.ToString();
    }

    private async Task DownloadFile(string content, string fileName, string contentType)
    {
        var bytes = Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        await JSRuntime.InvokeVoidAsync("downloadFile", base64, fileName, contentType);
    }
}
